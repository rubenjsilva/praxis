--------------------------------------------------------------------------------
NAMING CONVENTION
--------------------------------------------------------------------------------
Everything must be as verbose as possible, so its purpose is clear to everyone.
Use underscore when naming mixins and variables.
Use hyphens for extends, placeholder selectors and classes.
Favour nesting instead of BEM naming conventions.
Do not use camelCase.


--------------------------------------------------------------------------------
AVOID
--------------------------------------------------------------------------------
Never style an element based on its id. If need be create a new class.
Always avoid the rule !important. If it feels like the only solution then maybe the css isn't properly structured.
Minimize specificity, i.e., favour generic classes/single elements (atoms) over complex elements.


--------------------------------------------------------------------------------
CODING CONVENTION
--------------------------------------------------------------------------------
Use proper indentation (recommended two spaces).
Use at least a space between properties and values, e.g. width: 2rem not width:2rem.
Add a blank line above selectors that have styles.
Don't add units after 0 values, unless it is required by a mixin.
When setting rules, follow this order: @extends, @includes, styling rules, pseudo states, concatenated selectors, nested selectors, media queries.


--------------------------------------------------------------------------------
FOLDERS STRUCTURE
--------------------------------------------------------------------------------
- atoms
  - _base.scss          # Common base styles, e.g. body, a, p, b
  - _buttons.scss       # Buttons styles
  - _checkbox.scss      # Checkboxes, radios and toggles styles
  - _dropdown.scss      # Dropdown style
  - _headings.scss      # Title and subtitle styles
  - _progressbar.scss   # Progress bar style
  - _textfields.scss    # Input and textarea styles
  - ...

- blocs
  - _chart.scss         # Chart styles
  - _chat.scss          # Messages styles
  - _footer.scss        # Footer
  - _header.scss        # Header
  - _pagination.scss    # Pagination
  - _widget.scss        # Blocs of content/items, e.g. widgets
  - ...

- pages
  - _auth.scss          # Authentication screens specific styles
  - _contacts.scss      # Contact specific styles
  - _home.scss          # Home specific styles
  - _settings.scss      # Settings specific styles
  - ...

- resources
  - _fonts.scss         # Font family to be used
  - _grid.scss          # Grid system
  - _helpers.scss       # Atomic helpers
  - _mixins.scss        # Helper functions such as text-shadow, box-shadow or responsive break points
  - _palette.scss       # Colors palette
  - _reset.scss         # Reset/normalize elements cross browser
  - _variables.scss     # Images/resources and helper variables, e.g. $radius
  - _wrappers.scss      # Generic elements that help organize content, e.g. .flex-sb

(- vendor)              # Folder for external libs, e.g. animate.css (create only if needed)

(- components)          # Folder for reactjs specific components (create only if needed)

application.scss        # Main sass file, the one to where all sass will be compile into
(ie.scss)               # Main ie fixes file (create only if needed)


--------------------------------------------------------------------------------
IMPORTS ORDER @application.scss
--------------------------------------------------------------------------------
'resources/reset',
'resources/mixins',
'resources/grid',

'resources/fonts',
'resources/palette',
'resources/variables',
'resources/wrappers',

('vendor/*',)

'atoms/base',
'atoms/buttons',
'atoms/checkbox',
'atoms/dropdown',
'atoms/headings',
'atoms/progressbar',
'atoms/textfields',

'blocs/chart',
'blocs/chat',
'blocs/footer',
'blocs/header',
'blocs/pagination',
'blocs/widget',

'pages/auth',
'pages/contact',
'pages/home',
'pages/settings',

('components/*',)

'resources/helpers';


--------------------------------------------------------------------------------
BROWSER SPECIFIC
--------------------------------------------------------------------------------
Whenever is needed to create specific css to fix some weird bug or address some browser specific issue/style (this may occur with older versions of ie), create a specific file for that particularity.
e.g. fixing buttons and checkboxes on IE9
-atoms
  - _buttons_ie.scss
  - _checkbox_ie.scss

Then import all these fixes in main file ie.scss and link this file in html header tag [if lt IE 9] to target only IE.

For IE10 and above wrap the necessary css code with the following @media screen and (min-width:0\0) { /* css here */ }


--------------------------------------------------------------------------------
RESPONSIVENESS
--------------------------------------------------------------------------------
When a file starts to have too much complexity due to several break points or too many rules, it may be a good case to address responsiveness on a separate file. When that is the case use the same file name with a suffix to identify its purpose.
e.g. _form_responsiveness.scss

